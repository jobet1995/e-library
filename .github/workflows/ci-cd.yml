name: CI/CD Pipeline

on:
  push:
    branches: [master, develop, "feature/**"]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

env:
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check and format code with Prettier
        run: |
          if ! npx prettier --check .; then
            echo 'Code formatting issues found. Attempting to fix...'
            npx prettier --write .
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'actions@github.com'
            git add .
            git commit -m 'style: format code with Prettier' || \
              (echo 'Failed to commit formatting changes. Please check your git configuration.' && exit 1)
          fi

      - name: Run tests
        run: |
          # Skip tests if the test directory doesn't exist
          if [ ! -d "./test" ] && [ ! -d "./__tests__" ]; then
            echo 'No test directory found. Skipping tests.'
            exit 0
          fi
          # If we get here, run the tests
          npm test || (echo 'Tests failed' && exit 1)

  docker:
    name: Build and Push Docker Image
    needs: test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/e-library
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=sha,format=long,prefix=,suffix=,enable=${{ github.ref != format('refs/heads/{0}', 'master') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL || 'http://localhost:3000' }}
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache-filters: true

  deploy:
    name: Deploy to Vercel
    needs: [test, docker]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Install Project Dependencies
        run: npm ci

      - name: Build with Vercel
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
